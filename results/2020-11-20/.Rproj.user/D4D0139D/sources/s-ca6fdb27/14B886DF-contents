> library(parallel)
> library(SimRAD)
> library(dplyr)
> 
> ## ESCURÇAR ELS ENZIMS PERQUÈ NO XUTA 
> 
> ## Definir 79 enzims de restricció 
> enzims <- read.table("~/cophyhopa/data/enzymes.txt", row.names = 1, col.names = c('enzims', 'Prime5', 'Prime3'), as.is = TRUE)
> NumEnzims <- dim(enzims)[1]
> combinacions_all <- data.frame(
+   cs_5p1 = rep(enzims$Prime5, each=NumEnzims),
+   cs_3p1 = rep(enzims$Prime3, each=NumEnzims),
+   cs_5p2 = rep(enzims$Prime5, NumEnzims),
+   cs_3p2 = rep(enzims$Prime3, NumEnzims),
+   stringsAsFactors = FALSE
+ )
> row.names(combinacions_all) <- paste(rep(row.names(enzims), each=NumEnzims),
+                                      rep(row.names(enzims), NumEnzims),
+                                      sep = '_')
> z1 <- combn(row.names(enzims), 2)
> z1 <- t(z1)
> z1 <- as.data.frame(z1)
> library(tidyr)
> combinations <- unite(z1, combinacio, c(1:2), sep = "_", remove = TRUE)
> comb_index <- combinacions_all[combinations[,1],] 
> list_cs <- lapply(1:dim(comb_index)[1], function(x) comb_index[x,])  #dimensió 1:x
> 
> ## Llegir l'arxiu dels segments _ 0.25% del DNA
> digestions <- read.table("~/cophyhopa/results/2020-11-20/digestions_all.txt", sep = "/")
> 
> # Seleccionar les combinacions amb més segments i crear una llista amb el nº de segm
> higher_seg <- digestions > 200000
> segments <- digestions[higher_seg]
> 
> # Quina es la posició de les combinacions d'enzims que donen el major nº de seg
> loc_enzims <- which(higher_seg == TRUE)
> 
> list_rec.cs <- list_cs[loc_enzims]
> 
> ## Crear la funció que digereixi i seeccioni els fragments
> refseq <- SimRAD::ref.DNAseq("~/cophyhopa/data/reference.fa", subselect.contigs = FALSE)
> 
> cores <- detectCores()
> cl <- makeForkCluster(48)
> clusterExport(cl, "refseq", envir = .GlobalEnv)
> 
> digest_select <- function(x) {
+   digestio <- SimRAD::insilico.digest(refseq, x[["cs_5p1"]], x[["cs_3p1"]], x[["cs_5p2"]], x[["cs_3p2"]])
+   seleccio1 <- SimRAD::adapt.select(digestio, type='AB+BA', x[["cs_5p1"]], x[["cs_3p1"]], x[["cs_5p2"]], x[["cs_3p2"]])
+   seleccio2 <- SimRAD::size.select(seleccio1, min.size=500, max.size=1000, graph=FALSE, verbose=FALSE)
+   length.select <- length(seleccio2)
+   return(length.select)
+ }
> t <- proc.time()
> 
> digestions_51 <- parallel::parLapply(cl, list_rec.cs, digest_select)
